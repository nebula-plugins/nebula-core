/* Common conventions for Nebula plugins */

assertHasPlugin 'groovy'
assertHasPlugin 'jacoco'
assertHasPlugin 'com.gradle.plugin-publish'

group = 'com.netflix.nebula'

dependencies {
    compile localGroovy()
    compile gradleApi()
    testCompile('com.netflix.nebula:nebula-test:4.0.0') {
        exclude group: 'org.codehaus.groovy'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

test {
    jvmArgs "-XX:MaxPermSize=256m"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

tasks.withType(Test) { task ->
    jacocoTestReport.executionData += files("$buildDir/jacoco/${task.name}.exec")
}

pluginBundle {
    website = "https://github.com/nebula-plugins/${project.name}"
    vcsUrl = "https://github.com/nebula-plugins/${project.name}.git"
    description = project.description

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
    }
}

def assertHasPlugin(String id) {
    assert plugins.findPlugin(id) : "The ${id} plugin must be installed!"
}

project.tasks.withType(com.jfrog.bintray.gradle.BintrayUploadTask) { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':final') || graph.hasTask(':candidate')
        }
    }
}
project.tasks.withType(org.jfrog.gradle.plugin.artifactory.task.BuildInfoBaseTask) { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':snapshot') || graph.hasTask(':devSnapshot')
        }
    }
}
